from pybeamline.algorithms.discovery import heuristics_miner_lossy_counting
from pybeamline.algorithms.discovery.oc_heuristics_miner_lossy_counting import oc_heuristics_miner_lossy_counting
from pybeamline.algorithms.oc_operator import OCOperator
from pybeamline.algorithms.ocdfg_merge_operator import ocdfg_merge_operator
from pybeamline.objects.ocdfgvisualizer import OCDFGVisualizer
from pybeamline.sources.dict_ocel_test_source import dict_test_ocel_source
from pybeamline.sources.dict_to_ocel import dict_test_ocel_log
from pybeamline.utils.dfg_to_graphviz import dfg_to_graphviz
from pybeamline.utils.ocdfg_merger import OCDFGMerger
from reactivex import operators as ops

from pybeamline.utils.ocdfg_to_graphviz import visualize_ocdfg_structure

test_events_phaseflow = [
    {"activity": "Register Customer", "objects": {"Customer": ["c1"]}},
    {"activity": "Create Order", "objects": {"Customer": ["c1"], "Order": ["o1"]}},
    {"activity": "Add Item", "objects": {"Order": ["o1"], "Item": ["i1"]}},
    {"activity": "Reserve Item", "objects": {"Item": ["i1"]}},
    {"activity": "Pack Item", "objects": {"Item": ["i1"], "Order": ["o1"]}},
    {"activity": "Ship Item", "objects": {"Item": ["i1"], "Shipment": ["s1"]}},
    {"activity": "Send Invoice", "objects": {"Order": ["o1"], "Invoice": ["inv1"]}},
    {"activity": "Receive Review", "objects": {"Customer": ["c1"], "Order": ["o1"]}},
]

test_events_phaseflow_ends_early = [
    {"activity": "Register Customer", "objects": {"Customer": ["c2"]}},
    {"activity": "Create Order", "objects": {"Customer": ["c2"], "Order": ["o2"]}},
    {"activity": "Add Item", "objects": {"Order": ["o2"], "Item": ["i2"]}},
    {"activity": "Reserve Item", "objects": {"Item": ["i2"]}},
    {"activity": "Cancel Order", "objects": {"Customer": ["c2"], "Order": ["o2"]}}
]

combined_log = dict_test_ocel_source([(test_events_phaseflow_ends_early,25),(test_events_phaseflow, 2500)], shuffle=False)


control_flow = {
    "Order": oc_heuristics_miner_lossy_counting(model_update_frequency=10, max_approx_error=0.1),
    "Item": oc_heuristics_miner_lossy_counting(model_update_frequency=10),
    "Customer": oc_heuristics_miner_lossy_counting(model_update_frequency=10, max_approx_error=0.1),
    "Shipment": oc_heuristics_miner_lossy_counting(model_update_frequency=1),
    "Invoice": oc_heuristics_miner_lossy_counting(model_update_frequency=1),
}
def save_graphiz_output(graph):
    # save to file
    with open("output_graph.dot", "w") as f:
        f.write(graph)

oc_operator = OCOperator(control_flow)
oc_merger = OCDFGMerger()
oc_visualizer = OCDFGVisualizer()


# visualize the OCDFG structure
oc_merger.on_change(lambda odfm: oc_visualizer.save(
    odfm,
    "ocdfg_structure.png",
))



# pipe the combined log to the OCOperator op
combined_log.pipe(
    oc_operator.op(),
    ocdfg_merge_operator(oc_merger)
).subscribe(on_completed=lambda: oc_visualizer.generate_html_slideshow("ocdfg_slideshow.html"))

oc_visualizer.generate_html_slideshow("ocdfg_slideshow.html")

#dot = visualize_ocdfg_structure(edges)
#dot.render('ocdfg', view=True)

